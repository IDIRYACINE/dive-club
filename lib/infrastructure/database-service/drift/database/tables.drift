CREATE TABLE DivingSpecialties(
    specialty_id INTEGER PRIMARY KEY AUTOINCREMENT,
    specialty_name TEXT NOT NULL
);

CREATE TABLE DivingDivisions(
    division_id INTEGER PRIMARY KEY AUTOINCREMENT,
    division_name TEXT NOT NULL
);

CREATE TABLE Participants(
    participant_id INTEGER PRIMARY KEY AUTOINCREMENT,
    participant_name TEXT NOT NULL,
    birth_date Date NOT NULL,
    division_id INTEGER NOT NULL REFERENCES DivingDivisions(division_id),
    specialty_id INTEGER NOT NULL REFERENCES DivingSpecialties(specialty_id)
);

CREATE TABLE Scores(
    participant_id INTEGER NOT NULL REFERENCES Participants(participant_id),
    division_id INTEGER NOT NULL REFERENCES DivingDivisions(division_id),
    specialty_id INTEGER NOT NULL REFERENCES DivingSpecialties(specialty_id),
    score_date Date NOT NULL DEFAULT (CURRENT_DATE),
    score REAL NOT NULL,
    PRIMARY KEY (participant_id, division_id, specialty_id)
);

CREATE INDEX score_idx ON Scores(score);

createParticipant(
    REQUIRED :name AS TEXT,
    REQUIRED :birthDate AS DATE,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER
):
INSERT INTO
    Participants(
        participant_name,
        birth_date,
        division_id,
        specialty_id
    )
values
    (
        :name,
        :birthDate,
        :divisionId,
        :specialtyId
    );

updateParticipant(
    REQUIRED :id AS INTEGER,
    REQUIRED :name AS TEXT,
    REQUIRED :birthDate AS DATE,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER
):
UPDATE
    Participants
SET
    participant_name = :name,
    birth_date = :birthDate,
    division_id = :divisionId,
    specialty_id = :specialtyId
WHERE
    participant_id = :id;

createScore(
    REQUIRED :participantId AS INTEGER,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER,
    REQUIRED :date AS DATE,
    REQUIRED :score AS REAL
):
INSERT
    OR REPLACE INTO Scores(
        participant_id,
        score_date,
        score,
        division_id,
        specialty_id
    )
values
    (
        :participantId,
        :date,
        :score,
        :divisionId,
        :specialtyId
    );

updateScore(
    REQUIRED :participantId AS INTEGER,
    REQUIRED :score AS REAL,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER
):
UPDATE
    Scores
SET
    score_date = CURRENT_DATE,
    score = :score
WHERE
    participant_id = :participantId
    AND division_id = :divisionId
    AND specialty_id = :specialtyId;

createDivingSpecialties(REQUIRED :name AS TEXT):
INSERT INTO
    DivingSpecialties(specialty_name)
values
    (:name);

updateDivingSpecialties(REQUIRED :id AS INTEGER, REQUIRED :name AS TEXT):
UPDATE
    DivingSpecialties
SET
    specialty_name = :name
WHERE
    specialty_id = :id;

createDivingDivisions(REQUIRED :name AS TEXT):
INSERT INTO
    DivingDivisions(division_name)
values
    (:name);

updateDivingDivisions(REQUIRED :id AS INTEGER, REQUIRED :name AS TEXT):
UPDATE
    DivingDivisions
SET
    division_name = :name
WHERE
    division_id = :id;

selectCompetitionScores:
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
ORDER BY
    score DESC;

selectCompetitionScoresBySpecialty(REQUIRED :id AS INTEGER):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
WHERE
    Scores.specialty_id = :id
ORDER BY
    score DESC;

selectCompetitionScoresByDivision(REQUIRED :id AS INTEGER):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
WHERE
    Scores.division_id = :id
ORDER BY
    score DESC;

selectCompetitionScoresBySpecialtyAndDivision(
    REQUIRED :specialtyId AS INTEGER,
    REQUIRED :divisionId AS INTEGER
):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
WHERE
    Scores.specialty_id = :specialtyId
    AND Scores.division_id = :divisionId
ORDER BY
    score DESC;

selectDivingSpecialties:
SELECT
    *
FROM
    DivingSpecialties;

selectDivingDivisions:
SELECT
    *
FROM
    DivingDivisions;

searchParticipantsByName(REQUIRED :name AS TEXT):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name
FROM
    Participants
    INNER JOIN DivingSpecialties on DivingSpecialties.specialty_id = Participants.specialty_id
    INNER JOIN DivingDivisions on DivingDivisions.division_id = Participants.division_id
WHERE
    participant_name LIKE :name;

selectParticiapnts:
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name
FROM
    Participants
    INNER JOIN DivingSpecialties on DivingSpecialties.specialty_id = Participants.specialty_id
    INNER JOIN DivingDivisions on DivingDivisions.division_id = Participants.division_id;

selectParticiapnsBySpecialty(REQUIRED :id AS INTEGER):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name
FROM
    Participants
    INNER JOIN DivingSpecialties on DivingSpecialties.specialty_id = Participants.specialty_id
    INNER JOIN DivingDivisions on DivingDivisions.division_id = Participants.division_id
where
    Participants.specialty_id = :id;

selectParticiapntsByDivision(REQUIRED :id AS INTEGER):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name
FROM
    Participants
    INNER JOIN DivingSpecialties on DivingSpecialties.specialty_id = Participants.specialty_id
    INNER JOIN DivingDivisions on DivingDivisions.division_id = Participants.division_id
where
    Participants.division_id = :id;

selectParticiapntsByDivisionAndSpecialty (
    REQUIRED :division_id AS INTEGER,
    REQUIRED :specialty_id AS INTEGER
):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name
FROM
    Participants
    INNER JOIN DivingSpecialties on DivingSpecialties.specialty_id = Participants.specialty_id
    INNER JOIN DivingDivisions on DivingDivisions.division_id = Participants.division_id
where
    Participants.division_id = :division_id
    AND Participants.specialty_id = :specialty_id;