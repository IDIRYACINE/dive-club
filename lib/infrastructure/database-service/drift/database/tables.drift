CREATE TABLE DivingSpecialties(
    specialty_id INTEGER PRIMARY KEY AUTOINCREMENT,
    specialty_name TEXT NOT NULL
);

CREATE TABLE DivingDivisions(
    division_id INTEGER PRIMARY KEY AUTOINCREMENT,
    division_name TEXT NOT NULL
);

CREATE TABLE Clubs (
    club_id INTEGER PRIMARY KEY AUTOINCREMENT,
    club_name TEXT NOT NULL
);

CREATE TABLE AgeDivisions (
    age_division_id INTEGER PRIMARY KEY,
    age_division_name TEXT NOT NULL
);

CREATE TABLE AgeDivisionsEntry (
    age_division_year INTEGER PRIMARY KEY,
    age_division_id INTEGER NOT NULL REFERENCES AgeDivisions(age_division_id)
);

CREATE TABLE Participants(
    participant_id INTEGER PRIMARY KEY AUTOINCREMENT,
    participant_first_name TEXT NOT NULL,
    participant_last_name TEXT NOT NULL,
    entry_time INTEGER NOT NULL,
    birth_date Date NOT NULL,
    participant_series INTEGER,
    participant_column INTEGER,
    club_id INTEGER NOT NULL REFERENCES Clubs(club_id),
    gender_id INTEGER NOT NULL REFERENCES Genders(gender_id),
    division_id INTEGER NOT NULL REFERENCES DivingDivisions(division_id),
    specialty_id INTEGER NOT NULL REFERENCES DivingSpecialties(specialty_id),
    age_division_year INTEGER NOT NULL REFERENCES AgeDivisionsEntry(age_division_year)
);

CREATE TABLE Genders (
    gender_id INTEGER PRIMARY KEY AUTOINCREMENT,
    gender_name TEXT NOT NULL
);

CREATE TABLE Scores(
    participant_id INTEGER NOT NULL REFERENCES Participants(participant_id),
    division_id INTEGER NOT NULL REFERENCES DivingDivisions(division_id),
    specialty_id INTEGER NOT NULL REFERENCES DivingSpecialties(specialty_id),
    age_division_year INTEGER NOT NULL REFERENCES AgeDivisionsEntry(age_division_year),
    gender_id INTEGER NOT NULL REFERENCES Genders(gender_id),
    score_date Date NOT NULL DEFAULT (CURRENT_DATE),
    score INTEGER NOT NULL,
    PRIMARY KEY (
        participant_id,
        division_id,
        specialty_id,
        age_division_year
    )
);

CREATE INDEX score_idx ON Scores(score);

createParticipant(
    REQUIRED :firstName AS TEXT,
    REQUIRED :lastName AS TEXT,
    REQUIRED :birthDate AS DATE,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER,
    REQUIRED :ageDivisionYear AS INTEGER,
    REQUIRED :genderId AS INTEGER,
    REQUIRED :entryTime AS INTEGER,
    REQUIRED :clubId AS INTEGER
):
INSERT INTO
    Participants(
        participant_first_name,
        participant_last_name,
        birth_date,
        division_id,
        specialty_id,
        age_division_year,
        gender_id,
        entry_time,
        club_id
    )
values
    (
        :firstName,
        :lastName,
        :birthDate,
        :divisionId,
        :specialtyId,
        :ageDivisionYear,
        :genderId,
        :entry_time,
        :clubId
    );

updateParticipant(
    REQUIRED :firstName AS TEXT,
    REQUIRED :lastName AS TEXT,
    REQUIRED :birthDate AS DATE,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER,
    REQUIRED :ageDivisionYear AS INTEGER,
    REQUIRED :genderId AS INTEGER,
    REQUIRED :entryTime AS INTEGER
):
UPDATE
    Participants
SET
    participant_first_name = :name,
    birth_date = :birthDate,
    division_id = :divisionId,
    specialty_id = :specialtyId
WHERE
    participant_id = :id;

createScore(
    REQUIRED :participantId AS INTEGER,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER,
    REQUIRED :ageDivisionYear AS INTEGER,
    REQUIRED :genderId AS INTEGER,
    REQUIRED :date AS DATE,
    REQUIRED :score AS INTEGER
):
INSERT
    OR REPLACE INTO Scores(
        participant_id,
        score_date,
        score,
        division_id,
        specialty_id,
        age_division_year,
        gender_id
    )
values
    (
        :participantId,
        :date,
        :score,
        :divisionId,
        :specialtyId,
        :ageDivisionYear,
        :genderId
    );

updateScore(
    REQUIRED :participantId AS INTEGER,
    REQUIRED :score AS INTEGER,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :specialtyId AS INTEGER
):
UPDATE
    Scores
SET
    score_date = CURRENT_DATE,
    score = :score
WHERE
    participant_id = :participantId
    AND division_id = :divisionId
    AND specialty_id = :specialtyId;

createDivingSpecialties(REQUIRED :name AS TEXT):
INSERT INTO
    DivingSpecialties(specialty_name)
values
    (:name);

updateDivingSpecialties(REQUIRED :id AS INTEGER, REQUIRED :name AS TEXT):
UPDATE
    DivingSpecialties
SET
    specialty_name = :name
WHERE
    specialty_id = :id;

createDivingDivisions(REQUIRED :name AS TEXT):
INSERT INTO
    DivingDivisions(division_name)
values
    (:name);

updateDivingDivisions(REQUIRED :id AS INTEGER, REQUIRED :name AS TEXT):
UPDATE
    DivingDivisions
SET
    division_name = :name
WHERE
    division_id = :id;

createGenders(REQUIRED :name AS TEXT):
INSERT INTO
    Genders(gender_name)
values
    (:name);

updateGenders(REQUIRED :id AS INTEGER, REQUIRED :name AS TEXT):
UPDATE
    Genders
SET
    gender_name = :name
WHERE
    gender_id = :id;

createAgeDivisions(
    REQUIRED :id AS INTEGER,
    REQUIRED :name AS TEXT
):
INSERT INTO
    AgeDivisions(age_division_id, age_division_name)
values
    (:id, :name);

createAgeDivisionEntry(
    REQUIRED :year AS INTEGER,
    REQUIRED :id AS TEXT
):
INSERT INTO
    AgeDivisionsEntry(age_division_year, age_division_id)
values
    (:year, :id);

updateAgeDivisions(REQUIRED :id AS INTEGER, REQUIRED :name AS TEXT):
UPDATE
    AgeDivisions
SET
    age_division_name = :name
WHERE
    age_division_year = :id;

selectCompetitionScores:
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_first_name,
    Participants.participant_last_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
ORDER BY
    score ASC;

selectCompetitionScoresBySpecialty(REQUIRED :id AS INTEGER):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_first_name,
    Participants.participant_last_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
WHERE
    Scores.specialty_id = :id
ORDER BY
    score ASC;

selectCompetitionScoresByDivision(REQUIRED :id AS INTEGER):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_first_name,
    Participants.participant_last_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
WHERE
    Scores.division_id = :id
ORDER BY
    score ASC;

selectCompetitionScoresByAge(REQUIRED :year AS INTEGER):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_first_name,
    Participants.participant_last_name,
    AgeDivisions.age_division_name,
    Genders.gender_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Genders USING(gender_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN Participants USING (participant_id)
WHERE
    Scores.age_division_year = :year
ORDER BY
    score ASC;

selectCompetitionScoresBySpecialtyAndDivisionAndAge(
    REQUIRED :specialtyId AS INTEGER,
    REQUIRED :divisionId AS INTEGER,
    REQUIRED :year AS INTEGER
):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_first_name,
    Participants.participant_last_name,
    Genders.gender_name,
    AgeDivisions.age_division_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
    INNER JOIN Genders USING(gender_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
WHERE
    Scores.specialty_id = :specialtyId
    AND Scores.division_id = :divisionId
    AND Scores.age_division_year = :year
ORDER BY
    score ASC;

selectCompetitionScoresBySpecialtyAndDivision(
    REQUIRED :specialtyId AS INTEGER,
    REQUIRED :divisionId AS INTEGER
):
SELECT
    Scores.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    Participants.participant_first_name,
    Participants.participant_last_name
FROM
    Scores
    INNER JOIN DivingSpecialties USING (specialty_id)
    INNER JOIN DivingDivisions USING (division_id)
    INNER JOIN Participants USING (participant_id)
WHERE
    Scores.specialty_id = :specialtyId
    AND Scores.division_id = :divisionId
ORDER BY
    score ASC;

selectDivingSpecialties:
SELECT
    *
FROM
    DivingSpecialties;

selectDivingDivisions:
SELECT
    *
FROM
    DivingDivisions;

searchParticipantsById(REQUIRED :id AS INTEGER):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    AgeDivisions.age_division_name,
    Genders.gender_name,
    Clubs.club_name
FROM
    Participants
    INNER JOIN DivingSpecialties USING(specialty_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN Genders USING(gender_id)
    INNER JOIN DivingDivisions USING(division_id)
    INNER JOIN Clubs USING(club_id)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
WHERE
    participant_id = :id;

selectParticiapnts:
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    AgeDivisions.age_division_name,
    Genders.gender_name,
    Clubs.club_name
FROM
    Participants
    INNER JOIN DivingSpecialties USING(specialty_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
    INNER JOIN Genders USING(gender_id)
    INNER JOIN DivingDivisions USING(division_id)
    INNER JOIN Clubs USING(club_id);

selectParticiapnsBySpecialty(REQUIRED :id AS INTEGER):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    AgeDivisions.age_division_name,
    Genders.gender_name,
    Clubs.club_name
FROM
    Participants
    INNER JOIN DivingSpecialties USING(specialty_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
    INNER JOIN Genders USING(gender_id)
    INNER JOIN DivingDivisions USING(division_id)
    INNER JOIN Clubs USING(club_id)
where
    Participants.specialty_id = :id
ORDER BY
    Participants.entry_time;

selectParticiapntsByDivision(REQUIRED :id AS INTEGER):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    AgeDivisions.age_division_name,
    Genders.gender_name,
    Clubs.club_name
FROM
    Participants
    INNER JOIN DivingSpecialties USING(specialty_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
    INNER JOIN Genders USING(gender_id)
    INNER JOIN DivingDivisions USING(division_id)
    INNER JOIN Clubs USING(club_id)
where
    Participants.division_id = :id
ORDER BY
    Participants.entry_time;

selectParticiapntsByDivisionAndSpecialty (
    REQUIRED :division_id AS INTEGER,
    REQUIRED :specialty_id AS INTEGER
):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    AgeDivisions.age_division_name,
    Genders.gender_name,
    Clubs.club_name
FROM
    Participants
    INNER JOIN DivingSpecialties USING(specialty_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
    INNER JOIN Genders USING(gender_id)
    INNER JOIN DivingDivisions USING(division_id)
    INNER JOIN Clubs USING(club_id)
where
    Participants.division_id = :division_id
    AND Participants.specialty_id = :specialty_id
ORDER BY
    Participants.entry_time;

selectParticiapntsByClub (REQUIRED :clubId AS INTEGER):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    AgeDivisions.age_division_name,
    Genders.gender_name,
    Clubs.club_name
FROM
    Participants
    INNER JOIN DivingSpecialties USING(specialty_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
    INNER JOIN Genders USING(gender_id)
    INNER JOIN DivingDivisions USING(division_id)
    INNER JOIN Clubs USING(club_id)
where
    Participants.club_id = :clubId
ORDER BY
    Participants.entry_time;

selectAgeDivisions:
SELECT
    *
FROM
    AgeDivisionsEntry
    JOIN AgeDivisions USING(age_division_id);
    


selectAgeDivisionsOnly:
SELECT
    *
FROM
    AgeDivisions;    

selectClubs:
SELECT
    *
FROM
    Clubs;

updateParticipantSeriesAndColumn(
    REQUIRED :id AS INTEGER,
    REQUIRED :series AS INTEGER,
    REQUIRED :column AS INTEGER
):
UPDATE
    Participants
SET
    participant_series = :series,
    participant_column = :column
WHERE
    participant_id = :id;

selectParticiapntsByAgeAndDivisionAndSpecialty(
    REQUIRED :division_id AS INTEGER,
    REQUIRED :specialty_id AS INTEGER,
    REQUIRED :age_division_id AS INTEGER

):
SELECT
    Participants.*,
    DivingSpecialties.specialty_name,
    DivingDivisions.division_name,
    AgeDivisions.age_division_name,
    Genders.gender_name,
    Clubs.club_name
FROM
    Participants
    INNER JOIN DivingSpecialties USING(specialty_id)
    INNER JOIN AgeDivisionsEntry USING(age_division_year)
    INNER JOIN AgeDivisions ON AgeDivisions.age_division_id = AgeDivisionsEntry.age_division_id
    INNER JOIN Genders USING(gender_id)
    INNER JOIN DivingDivisions USING(division_id)
    INNER JOIN Clubs USING(club_id)
where
    Participants.division_id = :division_id
    AND Participants.specialty_id = :specialty_id
    AND AgeDivisions.age_division_id = :age_division_id
ORDER BY
    Participants.entry_time;